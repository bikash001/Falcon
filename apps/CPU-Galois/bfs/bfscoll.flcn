Graph hgraph;
struct node{
	Point(hgraph)  n1;
	int w;
};

Collection pred[struct node];

relaxEdge(Point p,Graph hgraph,Point p1,int weight,Collection pred[struct node]){
	int changed=0;
	int ddata=hgraph.points[p].dist;
	int newdist=hgraph.points[p1].dist+weight;
	if(newdist < hgraph.points[p].dist){
		hgraph.points[p].dist=newdist;
		struct node tt1;
		tt1.w=newdist;
		tt1.n1=p;
		pred.add(tt1);
	}
}

relaxNode1(struct node req,Graph hgraph,Collection  pred[struct node]){
	Point (hgraph) p1;
	struct node temp;
	temp=req;
	p1=temp.n1;
	foreach(t In p1.outnbrs){
		if(t.dist >(p1.dist+1)){
			t.dist=p1.dist+1;
			struct node tt1;
			tt1.w=t.dist;
			tt1.n1=t;
			pred.add(tt1);
		}
	}
}

int main(int argc,char *argv[]){
	hgraph.addPointProperty(dist,int);
	Point (hgraph) p;
	if(argc<4){
		printf("exec -t theads input");
		return 1;
	}
	hgraph.read(argv[3]);
	pred.OrderByIntValue(w,2);
	double rt1=rtclock();
	foreach(t In hgraph.points)t.dist=1234567890;
	p=hgraph.points[0];
	hgraph.points[p].dist=0;
	foreach(t In p.outnbrs){
		relaxEdge(t,hgraph,p,1,pred);
	}

	foreach(t In pred)relaxNode1(t,hgraph,pred);

	double rt2=rtclock();
	printf("TIME =%f\n",(rt2-rt1)*1000);
	int maxdist=0;

	for(int i=0;i<hgraph.npoints;i++){
		if(hgraph.points[i].dist>maxdist)maxdist=hgraph.points[i].dist;
	}
	printf("MAX DIST=%d \n", maxdist);
	return 0;
}
