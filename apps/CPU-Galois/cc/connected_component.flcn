Graph hgraph;
struct node{
	Point(hgraph)  n1;
	int w;
};

Collection pred[struct node];

void relaxEdge(Point p,Graph hgraph,Point p1,int weight,Collection pred[struct node]){
	int changed=0;
	int newdist=hgraph.points[p1].dist;
	while(newdist < (olddist=hgraph.points[p].dist)){
		MIN(hgraph.points[p].dist,newdist,changed);
		struct node tt1;
		tt1.w=newdist;
		tt1.n1=p;
		pred.add(tt1);
	}
	newdist=hgraph.points[p].dist;
	while(newdist < (olddist=hgraph.points[p1].dist)){
		MIN(hgraph.points[p1].dist,newdist,changed);
		struct node tt1;
		tt1.w=newdist;
		tt1.n1=p1;
		pred.add(tt1);
	}
	}
	reset(Point p, Graph hgraph){
	p.dist=p.x;
}

void relaxNode1(struct node req,Graph hgraph,Collection  pred[struct node]){
	Point (hgraph) p1;
	struct node temp;
	temp=req;
	p1=temp.n1;
	foreach(t In p1.outnbrs){
		int weight=hgraph.getweight(p1,t);
		relaxEdge(t,hgraph,p1,weight,pred);
	}
}

int main(int argc,char *argv[]){
	hgraph.addPointProperty(dist,int);
	Point (hgraph) p;
	if(argc<4){
		printf("exec -t theads input");
		return 1;
	}
	hgraph.read(argv[3]);
	pred.OrderByIntValue(w,10);
	double rt1=rtclock();
	foreach(t In hgraph.points)reset(t,hgraph);
	p=hgraph.points[0];
	hgraph.points[p].dist=0;
	
	foreach(t In p.outnbrs){
		int weight=hgraph.getweight(p,t);
		relaxEdge(t,hgraph,p,weight,pred);
	}
	
	foreach(t In pred)relaxNode1(t,hgraph,pred);
	
	double rt2=rtclock();
	printf("TIME =%f\n",(rt2-rt1)*1000);
	int maxdist=0;
	for(int i=0;i<hgraph.npoints;i++){
		if(hgraph.points[i].dist>maxdist)maxdist=hgraph.points[i].dist;
	}
	printf("MAX DIST=%d \n", maxdist);
	return 0;
}
